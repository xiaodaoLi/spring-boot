pluginManagement {
//	repositories {
//		mavenCentral()
//		gradlePluginPortal()
//		if (version.endsWith('-SNAPSHOT')) {
//			maven { url "https://repo.spring.io/snapshot" }
//		}
//	}
	repositories {
		//阿里云镜像
		maven { url 'https://maven.aliyun.com/nexus/content/groups/public/' }
		maven { url 'https://maven.aliyun.com/nexus/content/repositories/jcenter' }
		mavenCentral()
		gradlePluginPortal()
		maven {
			url 'https://repo.spring.io/release'
		}
		if (version.endsWith('-SNAPSHOT')) {
			maven { url "https://repo.spring.io/snapshot" }
		}
	}

	resolutionStrategy {
		eachPlugin {
			if (requested.id.id == "org.jetbrains.kotlin.jvm") {
				useVersion "${kotlinVersion}"
			}
			if (requested.id.id == "org.jetbrains.kotlin.plugin.spring") {
				useVersion "${kotlinVersion}"
			}
		}
	}
}

plugins {
	id "com.gradle.enterprise" version "3.12.5"
//	id "io.spring.ge.conventions" version "0.0.13"
}

rootProject.name="spring-boot-build"

settings.gradle.projectsLoaded {
	gradleEnterprise {
		buildScan {
			def toolchainVersion = settings.gradle.rootProject.findProperty('toolchainVersion')
			if (toolchainVersion != null) {
				value('Toolchain version', toolchainVersion)
				tag("JDK-$toolchainVersion")
			}
			def buildDir = settings.gradle.rootProject.getBuildDir()
			buildDir.mkdirs()
			new File(buildDir, "build-scan-uri.txt").text = "build scan not generated"
			buildScanPublished { scan ->
				buildDir.mkdirs()
				new File(buildDir, "build-scan-uri.txt").text = "<${scan.buildScanUri}|build scan>\n"
			}
		}
	}
}

include "spring-boot-project:spring-boot-dependencies"
include "spring-boot-project:spring-boot-parent"
include "spring-boot-project:spring-boot-tools:spring-boot-antlib"
include "spring-boot-project:spring-boot-tools:spring-boot-autoconfigure-processor"
include "spring-boot-project:spring-boot-tools:spring-boot-buildpack-platform"
include "spring-boot-project:spring-boot-tools:spring-boot-configuration-metadata"
include "spring-boot-project:spring-boot-tools:spring-boot-configuration-processor"
include "spring-boot-project:spring-boot-tools:spring-boot-gradle-plugin"
include "spring-boot-project:spring-boot-tools:spring-boot-gradle-test-support"
include "spring-boot-project:spring-boot-tools:spring-boot-jarmode-layertools"
include "spring-boot-project:spring-boot-tools:spring-boot-loader"
include "spring-boot-project:spring-boot-tools:spring-boot-loader-tools"
include "spring-boot-project:spring-boot-tools:spring-boot-maven-plugin"
include "spring-boot-project:spring-boot-tools:spring-boot-test-support"
include "spring-boot-project:spring-boot"
include "spring-boot-project:spring-boot-autoconfigure"
include "spring-boot-project:spring-boot-actuator"
include "spring-boot-project:spring-boot-actuator-autoconfigure"
include "spring-boot-project:spring-boot-cli"
include "spring-boot-project:spring-boot-devtools"
include "spring-boot-project:spring-boot-docs"
include "spring-boot-project:spring-boot-properties-migrator"
include "spring-boot-project:spring-boot-test"
include "spring-boot-project:spring-boot-test-autoconfigure"

//include "springBootDemo:springBootWebDemo_dependency"
//include "springBootDemo:springBootWebDemo"

include "springBootDemo:springBootWebDemo_dependency"
include "springBootDemo:springBootWebDemo_boot"

//include "springBootDemo:springBootWebDemo"

//include ':spring-framework'
////project(':spring-framework').projectDir = new File(settingsDir, '../../spring-framework')
////
//project(':spring-framework').projectDir = file('../spring-framework')

//include "spring-framework:spring-aop"
//include "spring-framework:spring-aspects"
//include "spring-framework:spring-beans"
//include "spring-framework:spring-context"
//include "spring-framework:spring-context-indexer"
//include "spring-framework:spring-context-support"
//include "spring-framework:spring-core"
//include "spring-framework:spring-expression"
//include "spring-framework:spring-instrument"
//include "spring-framework:spring-jcl"
//include "spring-framework:spring-jdbc"
//include "spring-framework:spring-jms"
//include "spring-framework:spring-messaging"
//include "spring-framework:spring-orm"
//include "spring-framework:spring-oxm"
//include "spring-framework:spring-r2dbc"
//include "spring-framework:spring-test"
//include "spring-framework:spring-tx"
//include "spring-framework:spring-web"
//include "spring-framework:spring-webflux"
//include "spring-framework:spring-webmvc"
//include "spring-framework:spring-websocket"
//include "spring-framework:framework-bom"
//include "spring-framework:integration-tests"

include "spring-boot-tests:spring-boot-integration-tests:spring-boot-configuration-processor-tests"
include "spring-boot-tests:spring-boot-integration-tests:spring-boot-launch-script-tests"
include "spring-boot-tests:spring-boot-integration-tests:spring-boot-loader-tests"
include "spring-boot-tests:spring-boot-integration-tests:spring-boot-server-tests"
include "spring-boot-system-tests:spring-boot-deployment-tests"
include "spring-boot-system-tests:spring-boot-image-tests"

file("${rootDir}/spring-boot-project/spring-boot-starters").eachDirMatch(~/spring-boot-starter.*/) {
	include "spring-boot-project:spring-boot-starters:${it.name}"
}

file("${rootDir}/spring-boot-tests/spring-boot-smoke-tests").eachDirMatch(~/spring-boot-smoke-test.*/) {
	include "spring-boot-tests:spring-boot-smoke-tests:${it.name}"
}

//include "spring-boot-project:springBootDemo"
//findProject(":spring-boot-project:springBootDemo")?.name = 'springBootDemo'

